/*
 *
 *
 * This program sequentially reads n Sharp GP2Y0A710K0F 100-500cm IR distance sensors then test to see if the 
 * reading is higher than the floor by an amount greater than the variable "hysteresis", 
 * if it is, the program extends the servo.
 *
 *Then it sets a "lastMoved" variable for each sensor/servo stationwith the time and blocks all further movement or
 *sensor reads until a period of time has passed.
 *
 *do do:
 *filter out fast changing sensor values - people moving too fast
 *write calibration routine that compensate for any sensor drift on floor reading
 *done - extend for 10 sensors and 10 servos, maybe with different calibration value for each sensor
 *
 * Charles Sowers 8/28/15
 *
  */

#include <VarSpeedServo.h>

VarSpeedServo myservo0;  // create servo object to control a servo
VarSpeedServo myservo1;
VarSpeedServo myservo2;
//    .
//    .
//    .
// a maximum of eight servo objects can be created - not sure why, can I change for Mega?

boolean debug = true;
boolean servoMoved0 = false;
boolean servoMoved1 = false;
boolean servoMoved2 = false;
//    .
//    .
//    .

const int sensorPin0 = 0;                //analog pin 0
const int sensorPin1 = 1;                //analog pin 1
const int sensorPin2 = 2;                //analog pin 2
//    .
//    .
//    .

const int number_of_stations = 10;
const int servoPin0 = 8;                 // the digital pin used for the servo
const int servoPin1 = 10;
const int servoPin2 = 9;
//    .
//    .
//    .

int hysteresis = 25;
int servoHome = 0;                    //servo home position
int extendSpeed = 35;                 //speed to extend servo
int extendAngle = 130;                //angle to extend servo

int currentDistance = 0;
int difference;

int floorHeight = 1000;

long lastMoveTime0 = 0;                   //holds time of last move
long lastMoveTime1 = 0;
long lastMoveTime2 = 0;
//    .
//    .
//    .
long lastCalibration = 0;



void setup() {
  myservo0.attach(servoPin1, 750, 2200); // attaches the servo on pin 9 to the servo object
  myservo1.attach(servoPin2, 750, 2200);
  myservo2.attach(servoPin2, 750, 2200);
  //    .
  //    .
  //    .
  myservo0.write(servoHome, 255, true);        // home the servo, as fast as possible, wait until done
  myservo1.write(servoHome, 255, true);
  myservo2.write(servoHome, 255, true);
  //    .
  //    .
  //    .
  Serial.begin(115200);

  analogReference(EXTERNAL);        //Aref connected to on-board 3.3v

  while (millis() < 5000) {           //calibrate floor height reading
    //currentDistance = analogRead(sensorPin2);
    currentDistance = sensorRead(2);
    if (currentDistance < floorHeight) {
      floorHeight = currentDistance;
    }
  }
  lastCalibration = millis();
  Serial.println("setup MultiAnalogIR_Trigger-2_servo");
  Serial.println("threshold on floor height");
  Serial.print("floor height = ");
  Serial.println(floorHeight);
}



void loop() {
  
  if (millis() > lastCalibration + 1800000) {   //recalibrate floor height every 30 minutes
    //do nothing for now, someday recalibrate to compensate for sensor drift
    lastCalibration = millis();
  }
  for ( int i = 0; i < number_of_stations; i++) {
    if (testLastMoveDelay(i)) {                         //enough time since last move?
      currentDistance = sensorRead(i);
      difference = currentDistance - floorHeight;
      if (debug) {
        Serial.print("sensor ");
        Serial.print(i);
        Serial.print(" = ");
        Serial.println(currentDistance);
        Serial.print("difference ");
        Serial.print(i);
        Serial.print(" = ");
        Serial.println(difference);
      }

      if ((currentDistance > floorHeight + hysteresis * 2) && !servoMovedTest(i)) {
        //myservo1.write(servoExtend, extendSpeed);
        moveServo(i, extendAngle, extendSpeed);
        writeServoMoved(i, true);
        if (debug) {
          Serial.print(" /////////////////////////////////////      call extend servo    ////////////////////////////////// ");
        }
        writeLastMoveTime(i);
      }
      else if ((currentDistance < floorHeight + hysteresis) && servoMovedTest(i)) {
        //myservo1.write(servoHome, 255);
        moveServo(i, servoHome, 255);
        writeServoMoved(i, false);
        writeLastMoveTime(i);
        if (debug) {
          Serial.print("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\     call home servo      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");
        }
      }
    }
  }
}

